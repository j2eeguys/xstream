/*
 * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

package com.thoughtworks.xstream.mapper;

import net.sf.cglib.proxy.Enhancer;


/**
 * Mapper that detects proxies generated by the CGLIB enhancer. The implementation modifies the name, so that it can
 * identify these types. Note, that this mapper relies on the CGLIB converters:
 * <ul>
 * <li>CGLIBEnhancedConverter</li>
 * </ul>
 * 
 * @author J&ouml;rg Schaible
 * @since 1.2
 */
public class CGLIBMapper extends MapperWrapper {

    private static String DEFAULT_NAMING_MARKER = "$$EnhancerByCGLIB$$";
    private final String alias;

    public interface Marker {}

    public CGLIBMapper(final Mapper wrapped) {
        this(wrapped, "CGLIB-enhanced-proxy");
    }

    public CGLIBMapper(final Mapper wrapped, final String alias) {
        super(wrapped);
        this.alias = alias;
    }

    @Override
    public String serializedClass(final Class<?> type) {
        final String serializedName = super.serializedClass(type);
        if (type == null) {
            return serializedName;
        }
        final String typeName = type.getName();
        return typeName.equals(serializedName)
            && typeName.indexOf(DEFAULT_NAMING_MARKER) > 0
            && Enhancer.isEnhanced(type) ? alias : serializedName;
    }

    @Override
    public Class<?> realClass(final String elementName) {
        return elementName.equals(alias) ? Marker.class : super.realClass(elementName);
    }
}
